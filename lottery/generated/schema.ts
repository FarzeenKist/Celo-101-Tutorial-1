// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LotteryRound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LotteryRound entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LotteryRound must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LotteryRound", id.toString(), this);
    }
  }

  static load(id: string): LotteryRound | null {
    return changetype<LotteryRound | null>(store.get("LotteryRound", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entryAmount(): BigInt {
    let value = this.get("entryAmount");
    return value!.toBigInt();
  }

  set entryAmount(value: BigInt) {
    this.set("entryAmount", Value.fromBigInt(value));
  }

  get totalPlayers(): i32 {
    let value = this.get("totalPlayers");
    return value!.toI32();
  }

  set totalPlayers(value: i32) {
    this.set("totalPlayers", Value.fromI32(value));
  }

  get prize(): BigInt {
    let value = this.get("prize");
    return value!.toBigInt();
  }

  set prize(value: BigInt) {
    this.set("prize", Value.fromBigInt(value));
  }

  get tickets(): Array<string> {
    let value = this.get("tickets");
    return value!.toStringArray();
  }

  set tickets(value: Array<string>) {
    this.set("tickets", Value.fromStringArray(value));
  }
}

export class PlayerInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlayerInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlayerInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PlayerInfo", id.toString(), this);
    }
  }

  static load(id: string): PlayerInfo | null {
    return changetype<PlayerInfo | null>(store.get("PlayerInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tickets(): Array<string> | null {
    let value = this.get("tickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tickets(value: Array<string> | null) {
    if (!value) {
      this.unset("tickets");
    } else {
      this.set("tickets", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TicketInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TicketInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TicketInfo", id.toString(), this);
    }
  }

  static load(id: string): TicketInfo | null {
    return changetype<TicketInfo | null>(store.get("TicketInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    return value!.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get lotteryRound(): string {
    let value = this.get("lotteryRound");
    return value!.toString();
  }

  set lotteryRound(value: string) {
    this.set("lotteryRound", Value.fromString(value));
  }

  get isWinner(): boolean {
    let value = this.get("isWinner");
    return value!.toBoolean();
  }

  set isWinner(value: boolean) {
    this.set("isWinner", Value.fromBoolean(value));
  }
}
