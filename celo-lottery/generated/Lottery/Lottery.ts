// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Ended extends ethereum.Event {
  get params(): Ended__Params {
    return new Ended__Params(this);
  }
}

export class Ended__Params {
  _event: Ended;

  constructor(event: Ended) {
    this._event = event;
  }

  get lotteryId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalPlayers(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get winningTicket(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Joined extends ethereum.Event {
  get params(): Joined__Params {
    return new Joined__Params(this);
  }
}

export class Joined__Params {
  _event: Joined;

  constructor(event: Joined) {
    this._event = event;
  }

  get lotteryId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ticketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get player(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Started extends ethereum.Event {
  get params(): Started__Params {
    return new Started__Params(this);
  }
}

export class Started__Params {
  _event: Started;

  constructor(event: Started) {
    this._event = event;
  }

  get lotteryId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get entryAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Lottery extends ethereum.SmartContract {
  static bind(address: Address): Lottery {
    return new Lottery("Lottery", address);
  }

  entryAmount(): BigInt {
    let result = super.call("entryAmount", "entryAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_entryAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("entryAmount", "entryAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastWinner(): Address {
    let result = super.call("lastWinner", "lastWinner():(address)", []);

    return result[0].toAddress();
  }

  try_lastWinner(): ethereum.CallResult<Address> {
    let result = super.tryCall("lastWinner", "lastWinner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastWinnerAmount(): BigInt {
    let result = super.call(
      "lastWinnerAmount",
      "lastWinnerAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastWinnerAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastWinnerAmount",
      "lastWinnerAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestRandomizingBlock(): BigInt {
    let result = super.call(
      "latestRandomizingBlock",
      "latestRandomizingBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestRandomizingBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestRandomizingBlock",
      "latestRandomizingBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lotteryId(): BigInt {
    let result = super.call("lotteryId", "lotteryId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lotteryId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lotteryId", "lotteryId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  open(): boolean {
    let result = super.call("open", "open():(bool)", []);

    return result[0].toBoolean();
  }

  try_open(): ethereum.CallResult<boolean> {
    let result = super.tryCall("open", "open():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  players(param0: BigInt): Address {
    let result = super.call("players", "players(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_players(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("players", "players(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  witnet(): Address {
    let result = super.call("witnet", "witnet():(address)", []);

    return result[0].toAddress();
  }

  try_witnet(): ethereum.CallResult<Address> {
    let result = super.tryCall("witnet", "witnet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class PickWinnerCall extends ethereum.Call {
  get inputs(): PickWinnerCall__Inputs {
    return new PickWinnerCall__Inputs(this);
  }

  get outputs(): PickWinnerCall__Outputs {
    return new PickWinnerCall__Outputs(this);
  }
}

export class PickWinnerCall__Inputs {
  _call: PickWinnerCall;

  constructor(call: PickWinnerCall) {
    this._call = call;
  }
}

export class PickWinnerCall__Outputs {
  _call: PickWinnerCall;

  constructor(call: PickWinnerCall) {
    this._call = call;
  }
}

export class RequestRandomnessCall extends ethereum.Call {
  get inputs(): RequestRandomnessCall__Inputs {
    return new RequestRandomnessCall__Inputs(this);
  }

  get outputs(): RequestRandomnessCall__Outputs {
    return new RequestRandomnessCall__Outputs(this);
  }
}

export class RequestRandomnessCall__Inputs {
  _call: RequestRandomnessCall;

  constructor(call: RequestRandomnessCall) {
    this._call = call;
  }
}

export class RequestRandomnessCall__Outputs {
  _call: RequestRandomnessCall;

  constructor(call: RequestRandomnessCall) {
    this._call = call;
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }

  get _entryAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}
