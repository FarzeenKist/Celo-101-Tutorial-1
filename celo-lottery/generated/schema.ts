// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Ended extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ended entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Ended must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ended", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Ended | null {
    return changetype<Ended | null>(store.get("Ended", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get lotteryId(): BigInt {
    let value = this.get("lotteryId");
    return value!.toBigInt();
  }

  set lotteryId(value: BigInt) {
    this.set("lotteryId", Value.fromBigInt(value));
  }

  get totalPlayers(): BigInt {
    let value = this.get("totalPlayers");
    return value!.toBigInt();
  }

  set totalPlayers(value: BigInt) {
    this.set("totalPlayers", Value.fromBigInt(value));
  }

  get winningTicket(): BigInt {
    let value = this.get("winningTicket");
    return value!.toBigInt();
  }

  set winningTicket(value: BigInt) {
    this.set("winningTicket", Value.fromBigInt(value));
  }

  get winningAmount(): BigInt {
    let value = this.get("winningAmount");
    return value!.toBigInt();
  }

  set winningAmount(value: BigInt) {
    this.set("winningAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Joined extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Joined entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Joined must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Joined", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Joined | null {
    return changetype<Joined | null>(store.get("Joined", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get lotteryId(): BigInt {
    let value = this.get("lotteryId");
    return value!.toBigInt();
  }

  set lotteryId(value: BigInt) {
    this.set("lotteryId", Value.fromBigInt(value));
  }

  get ticketId(): BigInt {
    let value = this.get("ticketId");
    return value!.toBigInt();
  }

  set ticketId(value: BigInt) {
    this.set("ticketId", Value.fromBigInt(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    return value!.toBytes();
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Started extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Started entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Started must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Started", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Started | null {
    return changetype<Started | null>(store.get("Started", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get lotteryId(): BigInt {
    let value = this.get("lotteryId");
    return value!.toBigInt();
  }

  set lotteryId(value: BigInt) {
    this.set("lotteryId", Value.fromBigInt(value));
  }

  get entryAmount(): BigInt {
    let value = this.get("entryAmount");
    return value!.toBigInt();
  }

  set entryAmount(value: BigInt) {
    this.set("entryAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
